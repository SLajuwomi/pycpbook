"""
@description
This script is a stress test for the Knuth-Morris-Pratt (KMP) string searching
algorithm. It validates the correctness of the `kmp_search` function by comparing
its results against a naive, but reliable, search method using Python's built-in
`string.find()`.

The test workflow is as follows:
1.  For a large number of iterations, generate a random text string and a
    shorter random pattern string from a small alphabet to increase the
    likelihood of multiple matches.
2.  Call the `kmp_search` function to find all occurrences of the pattern in
    the text.
3.  Implement a naive search loop that repeatedly calls `text.find(pattern, ...)`
    to find all occurrences and stores their starting indices.
4.  Assert that the list of indices returned by `kmp_search` is identical to
    the list generated by the naive search.

This process ensures that the KMP implementation, including its LPS array
precomputation, correctly identifies all matches and does not produce any
false positives or negatives.
"""

import sys
import os
import random

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))

from content.string.kmp import kmp_search
from stress_tests.utilities.random_gen import random_string


def naive_search(text, pattern):
    """
    A naive implementation of string searching for validation.
    It uses Python's built-in `find` method in a loop.
    """
    n, m = len(text), len(pattern)
    if m == 0:
        return list(range(n + 1))
    occurrences = []
    start_index = 0
    while True:
        index = text.find(pattern, start_index)
        if index == -1:
            break
        occurrences.append(index)
        start_index = index + 1
    return occurrences


def run_test():
    """
    Performs a stress test on the KMP implementation.
    """
    ITERATIONS = 500
    MAX_TEXT_LEN = 2000
    MAX_PATTERN_LEN = 50

    for i in range(ITERATIONS):
        text_len = random.randint(1, MAX_TEXT_LEN)
        # Use a small alphabet to increase match probability
        text = random_string(text_len, "abcde")

        pattern_len = random.randint(1, min(text_len, MAX_PATTERN_LEN))
        pattern = random_string(pattern_len, "abcde")

        res_optimized = kmp_search(text, pattern)
        res_naive = naive_search(text, pattern)

        assert res_optimized == res_naive, (
            f"KMP search failed on iteration {i}!\n"
            f"Text: '{text[:100]}...'\n"
            f"Pattern: '{pattern}'\n"
            f"Expected: {res_naive}\n"
            f"Got: {res_optimized}"
        )

    # Test edge cases
    assert kmp_search("abc", "") == [0, 1, 2, 3], "Edge case: empty pattern failed"
    assert kmp_search("", "abc") == [], "Edge case: empty text failed"
    assert kmp_search("", "") == [0], "Edge case: empty text and pattern failed"
    assert kmp_search("aaaaa", "a") == [0, 1, 2, 3, 4], "Edge case: single char pattern"
    assert kmp_search("ababa", "aba") == [0, 2], "Edge case: overlapping matches"

    print("Knuth-Morris-Pratt (KMP): All tests passed!")


if __name__ == "__main__":
    run_test()
